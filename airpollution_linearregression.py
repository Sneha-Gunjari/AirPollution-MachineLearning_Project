# -*- coding: utf-8 -*-
"""AirPollution_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jckQk-TdLGLB22nDKmCA2js3Yw5SYYY0
"""

# import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import numpy as np

# load the training and testing datasets
train_dataset = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')
test_dataset = pd.read_csv('/content/drive/MyDrive/Ml project/test.csv')


# split the training dataset into features and target variables
X_train = train_dataset[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_train = train_dataset[['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]

# create an instance of the Linear Regression model for each target variable
models = [LinearRegression() for i in range(y_train.shape[1]-1)]

# train each model using the training data
for i, model in enumerate(models):
    model.fit(X_train, y_train.iloc[:,i+1])

# predict the target variable values for the testing set using each model
X_test = test_dataset[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_preds = [model.predict(X_test) for model in models]

# merge the predicted target variable values with the date_time column
predictions = pd.concat([pd.DataFrame(y_preds[i], columns=[y_train.columns[i+1]]) for i in range(len(y_preds))], axis=1)
predictions['date_time'] = test_dataset['date_time']

# save the predictions to a submission file
predictions.to_csv('submission.csv', index=False)

# Define a function to calculate RMSLE
def rmsle(y_true, y_pred):
    assert len(y_true) == len(y_pred)
    return np.sqrt(np.mean(np.power(np.log1p(y_pred) - np.log1p(y_true), 2)))

data = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')
X = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_CO = data['target_carbon_monoxide']
y_benzene = data['target_benzene']
y_NOx = data['target_nitrogen_oxides']

X_train, X_test, y_CO_train, y_CO_test, y_benzene_train, y_benzene_test, y_NOx_train, y_NOx_test = train_test_split(X, y_CO, y_benzene, y_NOx, test_size=0.2, random_state=42)

# Train the model for Carbon Monoxide
lr_CO = LinearRegression()
lr_CO.fit(X_train, y_CO_train)

# Train the model for Benzene
lr_benzene = LinearRegression()
lr_benzene.fit(X_train, y_benzene_train)

# Train the model for Nitrogen Oxides
lr_NOx = LinearRegression()
lr_NOx.fit(X_train, y_NOx_train)

# Predict the target values for the testing set
y_CO_pred = lr_CO.predict(X_test)
y_benzene_pred = lr_benzene.predict(X_test)
y_NOx_pred = lr_NOx.predict(X_test)

# Calculate the RMSLE for each target variable
rmsle_CO = rmsle(y_CO_test, y_CO_pred)
rmsle_benzene = rmsle(y_benzene_test, y_benzene_pred)
rmsle_NOx = rmsle(y_NOx_test, y_NOx_pred)

# Print the RMSLE for each target variable
print('RMSLE for Carbon Monoxide:', rmsle_CO)
print('RMSLE for Benzene:', rmsle_benzene)
print('RMSLE for Nitrogen Oxides:', rmsle_NOx)

"""Accuracy..........."""

# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Load data
data = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')

# Split data into features and target variables
X = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_carbon_monoxide = data['target_carbon_monoxide']
y_benzene = data['target_benzene']
y_nitrogen_oxides = data['target_nitrogen_oxides']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_carbon_monoxide, test_size=0.2, random_state=0)

# Train linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on test set
y_pred = model.predict(X_test)

# Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("Mean Squared Error: ", mse)
print("Mean Absolute Error: ", mae)
print("Root Mean Squared Error: ", rmse)

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import numpy as np

# Define a function to calculate RMSLE
def rmsle(y_true, y_pred):
    assert len(y_true) == len(y_pred)
    return np.sqrt(np.mean(np.power(np.log1p(y_pred) - np.log1p(y_true), 2)))

# Load the dataset
data = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')

# Split the data into training and testing sets
X = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_CO = data['target_carbon_monoxide']
y_benzene = data['target_benzene']
y_NOx = data['target_nitrogen_oxides']

X_train, X_test, y_CO_train, y_CO_test, y_benzene_train, y_benzene_test, y_NOx_train, y_NOx_test = train_test_split(X, y_CO, y_benzene, y_NOx, test_size=0.2, random_state=42)

# Train the model for Carbon Monoxide
lr_CO = LinearRegression()
lr_CO.fit(X_train, y_CO_train)

# Train the model for Benzene
lr_benzene = LinearRegression()
lr_benzene.fit(X_train, y_benzene_train)

# Train the model for Nitrogen Oxides
lr_NOx = LinearRegression()
lr_NOx.fit(X_train, y_NOx_train)

# Predict the target values for the testing set
y_CO_pred = lr_CO.predict(X_test)
y_benzene_pred = lr_benzene.predict(X_test)
y_NOx_pred = lr_NOx.predict(X_test)

# Calculate the RMSLE for each target variable
rmsle_CO = rmsle(y_CO_test, y_CO_pred)
rmsle_benzene = rmsle(y_benzene_test, y_benzene_pred)
rmsle_NOx = rmsle(y_NOx_test, y_NOx_pred)

# Print the RMSLE for each target variable
print('RMSLE for Carbon Monoxide:', rmsle_CO)
print('RMSLE for Benzene:', rmsle_benzene)
print('RMSLE for Nitrogen Oxides:', rmsle_NOx)

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import numpy as np

# Define a function to calculate RMSLE
def rmsle(y_true, y_pred):
    assert len(y_true) == len(y_pred)
    return np.sqrt(np.mean(np.power(np.log1p(y_pred+1) - np.log1p(y_true+1), 2)))

# Load the dataset
data = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')

# Split the data into training and testing sets
X = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_CO = data['target_carbon_monoxide']
y_benzene = data['target_benzene']
y_NOx = data['target_nitrogen_oxides']

X_train, X_test, y_CO_train, y_CO_test, y_benzene_train, y_benzene_test, y_NOx_train, y_NOx_test = train_test_split(X, y_CO, y_benzene, y_NOx, test_size=0.2, random_state=42)

# Train the model for Carbon Monoxide
lr_CO = LinearRegression()
lr_CO.fit(X_train, y_CO_train)

# Train the model for Benzene
lr_benzene = LinearRegression()
lr_benzene.fit(X_train, y_benzene_train)

# Train the model for Nitrogen Oxides
lr_NOx = LinearRegression()
lr_NOx.fit(X_train, y_NOx_train)

# Predict the target values for the testing set
y_CO_pred = lr_CO.predict(X_test)
y_benzene_pred = lr_benzene.predict(X_test)
y_NOx_pred = lr_NOx.predict(X_test)

# Calculate the RMSLE for each target variable
rmsle_CO = rmsle(y_CO_test, y_CO_pred)
rmsle_benzene = rmsle(y_benzene_test, y_benzene_pred)
rmsle_NOx = rmsle(y_NOx_test, y_NOx_pred)
overall = (rmsle_CO + rmsle_benzene + rmsle_NOx)

# Print the RMSLE for each target variable
print('RMSLE for Carbon Monoxide:', rmsle_CO)
print('RMSLE for Benzene:', rmsle_benzene)
print('RMSLE for Nitrogen Oxides:', rmsle_NOx)
print('Overal Accuracy:', overall/3)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from sklearn.metrics import r2_score, mean_squared_error
df = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')
df.head()
df_test = pd.read_csv('/content/drive/MyDrive/Ml project/test.csv')
df_test.head(30)
df_test.tail()
df.isnull().sum()
df.dtypes
df.shape
df['date_time'] = pd.to_datetime(df['date_time'])
df['date_time'].nunique()
df.set_index('date_time', inplace=True)
df.sort_index(inplace=True)
sns.pairplot(df, diag_kind=None)
fig, axes = plt.subplots(nrows=3, figsize=(12,15))
axes[0].plot(df['target_carbon_monoxide'])
axes[1].plot(df['target_carbon_monoxide'].diff(24))
axes[2].plot(df['target_carbon_monoxide'].pct_change(6));

fig, axes = plt.subplots(nrows=3, figsize=(12,15))
axes[0].plot(df['target_benzene'])
axes[1].plot(df['target_benzene'].diff())
axes[2].plot(df['target_benzene'].pct_change());

fig, axes = plt.subplots(nrows=3, figsize=(12,15))
axes[0].plot(df['target_nitrogen_oxides'])
axes[1].plot(df['target_nitrogen_oxides'].diff())
axes[2].plot(df['target_nitrogen_oxides'].pct_change());
decomp = seasonal_decompose(df['target_carbon_monoxide'])
decomp.plot();
decomp = seasonal_decompose(df['target_benzene'])
decomp.plot();

decomp = seasonal_decompose(df['target_nitrogen_oxides'])
decomp.plot();
df['target_CO_lag_1'] = df['target_carbon_monoxide'].shift(1)
df['target_CO_lag_2'] = df['target_carbon_monoxide'].shift(2)
df['target_CO_lag_3'] = df['target_carbon_monoxide'].shift(3)
df.corr()
plot_acf(df['target_carbon_monoxide'], lags=48, alpha=0.05);

plot_acf(df['target_benzene'], lags=48, alpha=0.05);
plot_acf(df['target_nitrogen_oxides'], lags=48, alpha=0.05);
df.head()
# Create a column called `lag_CO_6` that lags carbon monoxide by 6 hours.
df['lag_CO_6'] = df['target_carbon_monoxide'].shift(6)

# Create a column called `lag_CO_12` that lags carbon monoxide by 12 hours
df['lag_CO_12'] = df['target_carbon_monoxide'].shift(12)

# Create a column called `lag_CO_24` that lags carbon monoxide by one day.
df['lag_CO_24'] = df['target_carbon_monoxide'].shift(24)

# Create a variable called `time` that takes on a value of 0 in 2010-03-10 18:00
# then increases by 1 each hour.
df['time'] = range(0, df.shape[0])
df.tail()
def plot_series(df, cols=None, title='Title', xlab=None, ylab=None):

    # Set figure size to be (18, 9).
    plt.figure(figsize=(18,9))

    # Iterate through each column name.
    for col in cols:

        # Generate a line plot of the column name.
        # You only have to specify Y, since our
        # index will be a datetime index.
        plt.plot(df[col])

    # Generate title and labels.
    plt.title(title, fontsize=26)
    plt.xlabel(xlab, fontsize=20)
    plt.ylabel(ylab, fontsize=20)

    # Enlarge tick marks.
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18);
plot_series(df, cols=['target_carbon_monoxide'], title='CarbonMonoxide by Hour', xlab='Hours', ylab='Carbon Monoxide')
def model_desired_target(target):
    X_train, X_test, y_train, y_test =train_test_split(df.drop(columns = ['target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']),df[target],test_size = 0.2,shuffle=False)
    X_train = sm.add_constant(X_train)
    X_test = sm.add_constant(X_test)
    X_train.dropna(inplace=True)
    y_train = y_train[X_train.index]
    lm = sm.OLS(y_train, X_train)
    lm_results = lm.fit()
    lm_preds = lm_results.predict(X_test)
    r2 = r2_score(y_test, lm_preds)
    rmse = mean_squared_error(y_test, lm_preds) ** 0.5
    print("r2_score: ", r2, "root mean squared error: ", rmse)
    # Let's plot our predictions!

    # Set figure size.
    plt.figure(figsize=(20,10))

    # Plot training data.
    plt.plot(y_train.index, y_train.values, color = 'blue')

    # Plot testing data.
    plt.plot(y_test.index, y_test.values, color = 'orange')

    # Plot predicted test values.
    plt.plot(lm_results.predict(X_test), color = 'green')

    # Set label.
    plt.title(label = f'Forecasting {target}', fontsize=24)

    # Resize tick marks.
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20);
model_desired_target('target_carbon_monoxide');
model_desired_target('target_benzene')
model_desired_target('target_nitrogen_oxides');

import pandas as pd
import matplotlib.pyplot as plt

# load the predicted values from the submission file
submission = pd.read_csv('/content/drive/MyDrive/Ml project/sample_submission.csv')
target_cols = [col for col in submission.columns if col.startswith('target_')]

if target_cols:
    target_var = target_cols[0]
    y_pred = submission[target_var]

    # generate a scatter plot of the predicted values
    plt.scatter(range(len(y_pred)), y_pred)
    plt.title(f'Predicted values for {target_var}')
    plt.xlabel('Sample index')
    plt.ylabel('Predicted value')
    plt.show()
else:
    print('No target variables found in submission file.')

import matplotlib.pyplot as plt

# plot the predicted target variable values for target_carbon_monoxide
plt.plot(predictions['date_time'], predictions['target_carbon_monoxide'], label='Predicted')
plt.xlabel('Date/Time')
plt.ylabel('Target Carbon Monoxide')
plt.title('Predicted Target Carbon Monoxide Values')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# load the training and testing datasets
train_dataset = pd.read_csv('/content/drive/MyDrive/Ml project/train.csv')
test_dataset = pd.read_csv('/content/drive/MyDrive/Ml project/test.csv')

# split the training dataset into features and target variables
X_train = train_dataset[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_train = train_dataset[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]

# create an instance of the Linear Regression model for each target variable
models = [LinearRegression() for i in range(y_train.shape[1])]

# train each model using the training data
for i, model in enumerate(models):
    model.fit(X_train, y_train.iloc[:,i])

# predict the target variable values for the testing set using each model
X_test = test_dataset[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]
y_preds = [model.predict(X_test) for model in models]

# merge the predicted target variable values with the date_time column
predictions = pd.concat([pd.DataFrame(y_preds[i], columns=[y_train.columns[i]]) for i in range(len(y_preds))], axis=1)
predictions['date_time'] = test_dataset['date_time']

# plot the predicted target variable values
for col in y_train.columns:
    fig, ax = plt.subplots()
    ax.plot(train_dataset['date_time'], train_dataset[col], label='Actual')
    ax.plot(predictions['date_time'], predictions[col], label='Predicted')
    ax.set_xlabel('Date Time')
    ax.set_ylabel(col)
    ax.legend()
    plt.show()

# save the predictions to a submission file
predictions.to_csv('submission.csv', index=False)